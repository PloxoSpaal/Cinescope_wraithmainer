#test_runner.yml
# Название workflow (отображается в интерфейсе GitHub Actions)
name: Run Tests and Generate Report

# Триггеры запуска:
on:
  # Запускать при любом push в репозиторий
  push: {}
  # Запускать при создании pull request в ветку main
  pull_request:
    branches: [ main ]

# Определение jobs (заданий)
jobs:
  # Job с именем "test"
  test:
    # Запуск на последней версии Ubuntu
    runs-on: ubuntu-latest

    # Последовательность шагов
    steps:
    # Шаг 1: Получение кода из репозитория
    - name: Checkout code
      # Используем стандартное действие для checkout (версия 4)
      uses: actions/checkout@v4

    # Шаг 2: Настройка Python окружения
    - name: Set up Python
      # Официальное действие для установки Python
      uses: actions/setup-python@v4
      with:
        # Указываем конкретную версию Python (3.10)
        python-version: '3.10'

    # Шаг 3: Установка зависимостей Python
    - name: Install dependencies
      run: |
        # Обновляем pip до последней версии
        python -m pip install --upgrade pip
        # Устанавливаем зависимости из requirements.txt
        pip install -r requirements.txt
        # Устанавливаем дополнительные пакеты для тестирования
        pip install pytest pytest-check allure-pytest

    # Шаг 4: Установка Allure Commandline
    - name: Install Allure Commandline
      run: |
        # Обновляем список пакетов Ubuntu
        sudo apt-get update
        # Устанавливаем Java Runtime (требование для Allure)
        sudo apt-get install default-jre -y
        # Скачиваем архив Allure версии 2.24.1
        wget https://github.com/allure-framework/allure2/releases/download/2.24.1/allure-2.24.1.tgz
        # Распаковываем архив в /opt/
        tar -zxvf allure-2.24.1.tgz -C /opt/
        # Создаем симлинк для доступа к allure из любой директории
        sudo ln -s /opt/allure-2.24.1/bin/allure /usr/bin/allure
        # Добавляем путь к Allure в переменную PATH
        echo "/opt/allure-2.24.1/bin" >> $GITHUB_PATH

    # Шаг 5: Запуск линтера flake8
    - name: Run linter
      run: |
        # Устанавливаем flake8
        pip install flake8
        # Запускаем flake8 с проверкой критических ошибок
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Закомментированная строка: расширенная проверка стиля кода
        # flake8 . --count --exit-zero --max-complexity=10 --max-line-length=200 --statistics

    # Шаг 6: Запуск тестов
    - name: Run tests
      run: |
        # Запуск конкретного теста с генерацией Allure-отчета
        python -m pytest -s -v -m "not integration" --alluredir=allure-results

    # Шаг 7: Сохранение результатов тестов как артефакта
    - name: Upload Allure results
      if: always()
      # Используем действие для загрузки артефактов
      uses: actions/upload-artifact@v4
      with:
        # Имя артефакта
        name: allure-results
        # Путь к файлам результатов
        path: allure-results/
        # Сколько дней хранить артефакт (максимум 90)
        retention-days: 5

  publish-report:  # Джоба для публикации Allure-отчета на GitHub Pages
    if: always()  # Джоба будет выполнена вне зависимости от успеха или неуспеха run-tests
    needs: [ test ]
    runs-on: ubuntu-latest  # Используем последнюю версию Ubuntu

    steps:
      - name: Check out repository  # Клонируем репозиторий, включая ветку gh-pages
        uses: actions/checkout@v4
        with:
          ref: gh-pages  # Операции будем выполнять в ветке gh-pages
          path: gh-pages  # Клонируем файлы в папку gh-pages

      - name: Download Allure results  # Загружаем ранее сохраненные результаты тестов
        uses: actions/download-artifact@v4
        with:
          name: allure-results  # Название артефакта
          path: allure-results  # Путь для скачивания

      - name: Allure Report action from marketplace  # Генерация отчета Allure
        uses: simple-elf/allure-report-action@v1.12
        if: always()
        with:
          allure_results: allure-results  # Папка с результатами тестов
          allure_history: allure-history  # Папка для хранения истории отчетов

      - name: Deploy report to Github Pages  # Публикация отчета на GitHub Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}  # Токен для доступа к репозиторию
          publish_branch: gh-pages  # Публикуем отчет в ветку gh-pages
          publish_dir: allure-history  # Папка, где находится сгенерированный отчет


